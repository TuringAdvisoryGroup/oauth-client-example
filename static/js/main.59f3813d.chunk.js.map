{"version":3,"sources":["components/button.js","api/helpers.js","api/authentication.js","api/user.js","api/request.js","api/transaction.js","config.js","api/index.js","components/sessionManager.js","components/header.js","features/hasBalance.js","components/userInfo.js","features/thirdPartyProfiles.js","features/transfer.js","App.js","serviceWorker.js","index.js"],"names":["Button","children","onClick","type","className","toQueryParams","params","esc","encodeURIComponent","Object","keys","map","k","join","RollAuthentication","oauthConfig","authCacheConfig","handleTokenResponse","oauthTokens","onSuccess","onFail","error","authToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","idToken","id_token","lastRefresh","moment","toISOString","handleCacheTokens","this","clientID","issuerURL","redirectURL","scopes","setCache","getCache","clearCache","exchangeCode","getAuthToken","bind","refreshFromCache","handleRefresh","getLoginURL","getLogoutURL","initializeSession","cached","JSON","parse","console","log","fetch","method","headers","body","code","grant_type","redirect_uri","redirectUrl","client_id","then","r","json","e","catch","err","response_type","response_mode","state","crypto","getRandomValues","Uint8Array","nonce","post_logout_redirect_uri","id_token_hint","url","urlParams","URLSearchParams","window","location","search","has","get","response","stringify","RollUserAPI","request","getMe","hasBalance","getThirdPartyProfiles","authenticated","userID","symbol","amount","RollRequest","apiURL","open","endpoint","options","Authorization","executeRequest","Promise","resolve","reject","a","ok","RollTransactionAPI","decimals","recipientUsername","message","form","toUser","token","config","origin","rollAPI","authentication","user","transaction","localStorage","setItem","getItem","removeItem","SessionContext","React","createContext","isLoggedIn","SessionManager","useState","media","setState","handleFail","useEffect","handleSuccess","Provider","value","cloneElement","LogoutButton","href","LoginButton","Warning","Header","session","useContext","indexOf","HasBalance","inputState","setInputState","errMessage","setErrMessage","successMessage","setSuccessMessage","placeholder","onChange","target","toUpperCase","n","Number","isNaN","hasbalance","UserInfo","pic","link","src","alt","username","name","ThirdParty","serviceName","info","ThirdPartyProfiles","third_parties","profiles","setProfiles","key","i","Transfer","inputs","setInputs","success","setResponse","updateInputs","id","handleSend","Math","round","internal","resp","floatAmount","Content","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59f3813d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Button({ children, onClick }) {\n  return (\n    <button type='button' onClick={onClick} className='button'>\n      {children}\n    </button>\n  );\n}\n","export function toQueryParams(params) {\n  const esc = encodeURIComponent;\n\n  return Object.keys(params)\n    .map((k) => esc(k) + \"=\" + esc(params[k]))\n    .join(\"&\");\n}\n","import moment from \"moment\";\nimport { toQueryParams } from \"./helpers\";\n\nconst AUTHORIZATION_GRANT = \"authorization_code\";\nconst REFRESH_GRANT = \"refresh_token\";\n\nclass RollAuthentication {\n  constructor(oauthConfig, authCacheConfig) {\n    this.clientID = oauthConfig.clientID;\n    this.issuerURL = oauthConfig.issuerURL;\n    this.redirectURL = oauthConfig.redirectURL;\n    this.scopes = oauthConfig.scopes;\n    this.setCache = authCacheConfig.setCache;\n    this.getCache = authCacheConfig.getCache;\n    this.clearCache = authCacheConfig.clearCache;\n    this.authToken = null;\n    this.expiresIn = null;\n    this.refreshToken = null;\n    this.idToken = null;\n    this.lastRefresh = null;\n    this.exchangeCode = null;\n\n    this.getAuthToken = this.getAuthToken.bind(this);\n    this.refreshFromCache = this.refreshFromCache.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.getLoginURL = this.getLoginURL.bind(this);\n    this.getLogoutURL = this.getLogoutURL.bind(this);\n    this.handleTokenResponse = this.handleTokenResponse.bind(this);\n    this.handleCacheTokens = this.handleCacheTokens.bind(this);\n    this.initializeSession = this.initializeSession.bind(this);\n  }\n\n  getAuthToken() {\n    return this.authToken;\n  }\n\n  refreshFromCache(onSuccess, onFail) {\n    const cached = this.getCache();\n    if (!cached) {\n      onFail();\n      return;\n    }\n    const oauthTokens = JSON.parse(cached);\n    this.authToken = oauthTokens.authToken;\n    this.expiresIn = oauthTokens.expiresIn;\n    this.refreshToken = oauthTokens.refreshToken;\n    this.idToken = oauthTokens.idToken;\n    this.exchangeCode = oauthTokens.exchangeCode;\n    this.handleRefresh(onSuccess, onFail);\n  }\n\n  handleRefresh(onSuccess, onFail) {\n    // the code parameter found in the callback url is required to refresh an authToken\n    // the refresh token is required to refresh an authToken\n    if (!this.exchangeCode || !this.refreshToken) {\n      console.log(\"missing exchangeCode and refreshToken, aborting refresh\");\n      return;\n    }\n\n    console.log(\"attempting to refresh tokens...\");\n\n    // send a request to refresh the authToken with relevant parameters sent as query params\n    fetch(`${this.issuerURL}/token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: toQueryParams({\n        code: this.exchangeCode,\n        refresh_token: this.refreshToken,\n        grant_type: REFRESH_GRANT,\n        redirect_uri: this.redirectUrl,\n        client_id: this.clientID,\n      }),\n    })\n      .then((r) => r.json())\n      .then((oauthTokens) => {\n        // use the handleTokenResponse function to store relevant params, check for errors, and handle success/error callbacks\n        this.handleTokenResponse(oauthTokens, onSuccess, (e) => {\n          this.clearCache(); // if the there is a non successful response, we must clear any cached token values.\n          onFail(e); // invoke on fail function passed in by class consumer\n        });\n      })\n      .catch((err) => onFail(err));\n  }\n\n  // build login url with state and nonce.\n  // the class consumer should navigate to this URL using their own implementation.\n  getLoginURL() {\n    const params = {\n      client_id: this.clientID,\n      redirect_uri: this.redirectURL,\n      scopes: this.scopes,\n      response_type: \"code\",\n      response_mode: \"form_post\",\n      state: crypto.getRandomValues(new Uint8Array(4)).join(\"\"),\n      nonce: crypto.getRandomValues(new Uint8Array(4)).join(\"\"),\n    };\n    return `${this.issuerURL}/auth?${toQueryParams(params)}`;\n  }\n\n  // build logout url with redirect uri, state, and idToken\n  // the class consumer should navigate to this URL using their own implementation.\n  getLogoutURL() {\n    this.clearCache();\n    const params = {\n      post_logout_redirect_uri: this.redirectURL,\n      state: crypto.getRandomValues(new Uint8Array(4)).join(\"\"),\n      id_token_hint: this.idToken,\n    };\n    return `${this.issuerURL}/sessions/logout?${toQueryParams(params)}`;\n  }\n\n  // pass in the callback url containing the ?code= param\n  initializeSession(url, onSuccess, onFail) {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    // if user already has an authToken, you are already logged in. Invoke the onSuccess function.\n    if (this.authToken) {\n      onSuccess();\n      return;\n    }\n\n    // validate that url contains the code param\n    if (!urlParams.has(\"code\")) {\n      onSuccess(\"url does not contain the code parameter\");\n    }\n\n    // save exchange code\n    this.exchangeCode = urlParams.get(\"code\");\n\n    fetch(`${this.issuerURL}/token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: toQueryParams({\n        code: this.exchangeCode,\n        grant_type: AUTHORIZATION_GRANT,\n        redirect_uri: this.redirectURL,\n        client_id: this.clientID,\n      }),\n    })\n      .then((response) => response.json())\n      .then(\n        (oauthTokens) =>\n          this.handleTokenResponse(oauthTokens, onSuccess, onFail) // save relevant params, handle errors, and invoke custom success/error callbacks\n      )\n      .catch((err) => onFail(err));\n  }\n\n  // common function to handle errors and map values from oauth authentication endpoints to the correct class values.\n  // invokes success/error callbacks\n  // sets timestamps every time user is authenticated\n  handleTokenResponse = (oauthTokens, onSuccess, onFail) => {\n    if (oauthTokens.error) {\n      onFail(oauthTokens);\n      return;\n    } else {\n      this.authToken = `Bearer ${oauthTokens.access_token}`;\n      this.expiresIn = oauthTokens.expires_in;\n      this.refreshToken = oauthTokens.refresh_token;\n      this.idToken = oauthTokens.id_token;\n      this.lastRefresh = moment().toISOString();\n      this.handleCacheTokens();\n      onSuccess(oauthTokens);\n    }\n  };\n\n  // serialize tokens and pass into custom caching function supplied by class consumer\n  handleCacheTokens() {\n    this.setCache(\n      JSON.stringify({\n        lastRefresh: this.lastRefresh,\n        authToken: this.authToken,\n        expiresIn: this.expiresIn,\n        refreshToken: this.refreshToken,\n        idToken: this.idToken,\n        exchangeCode: this.exchangeCode,\n      })\n    );\n  }\n}\n\nexport default RollAuthentication;\n","export default class RollUserAPI {\n  constructor(getAuthToken, request) {\n    this.getAuthToken = getAuthToken;\n    this.request = request;\n\n    this.getMe = this.getMe.bind(this);\n    this.hasBalance = this.hasBalance.bind(this);\n    this.getThirdPartyProfiles = this.getThirdPartyProfiles.bind(this);\n  }\n\n  // retrieve user data based on authToken\n  getMe() {\n    return this.request.authenticated(\"/v2/users/session\", \"GET\");\n  }\n\n  // check whether or not a user has a balance of a particular token. resolves to { hasbalance: boolean }\n  hasBalance(userID, symbol, amount) {\n    return this.request.authenticated(\n      `/v1/users/${userID}/hasbalance/${symbol}/${amount}`,\n      \"GET\"\n    );\n  }\n\n  // get information on which third party applications a user has connected to their roll account\n  getThirdPartyProfiles(userID) {\n    return this.request.authenticated(\n      `/v1/users/${userID}/profile/thirdparties`,\n      \"GET\"\n    );\n  }\n}\n","export default class RollRequest {\n  constructor(getAuthToken, apiURL) {\n    this.getAuthToken = getAuthToken;\n    this.authenticated = this.authenticated.bind(this);\n    this.open = this.open.bind(this);\n    this.apiURL = apiURL;\n  }\n\n  authenticated(endpoint, method, body) {\n    const options = {\n      method,\n      headers: {\n        Authorization: this.getAuthToken(),\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    if (body) options.body = JSON.stringify(body);\n\n    return this.executeRequest(endpoint, options);\n  }\n\n  open(endpoint, method) {\n    return this.executeRequest(endpoint, { method });\n  }\n\n  executeRequest(endpoint, options) {\n    const url = `${this.apiURL}${endpoint}`;\n    console.log(`exectuting request ${options.method} ${url}...`);\n    return new Promise((resolve, reject) => {\n      fetch(url, options)\n        .then(async (r) => {\n          const body = await r.json();\n          if (!r.ok) {\n            reject(body);\n          } else {\n            resolve(body);\n          }\n        })\n        .catch((err) => reject(err));\n    });\n  }\n}\n","const TRANSFER = \"transfer\";\n\nexport default class RollTransactionAPI {\n  constructor(getAuthToken, request) {\n    this.getAuthToken = getAuthToken;\n    this.request = request;\n  }\n\n  // send social money to a roll user\n  // amount must be converted using token decimals.\n  // Example:\n  // decimals = 4\n  // user input amount = 1.00\n  // converted amount = 10000\n  internal(userID, symbol, amount, decimals, recipientUsername, message) {\n    const form = {\n      amount,\n      decimals,\n      toUser: recipientUsername,\n      message,\n      type: TRANSFER,\n      token: symbol,\n    };\n    const endpoint = `/v1/transactions`;\n    return this.request.authenticated(endpoint, \"POST\", form);\n  }\n}\n","const config = {\n  apiURL: \"https://api.tryroll.com\",\n  clientID: \"example\",\n  issuerURL: \"https://oauth.tryroll.com/oauth2\",\n  redirectURL: window.location.origin,\n  scopes: [\"offline\", \"openid\", \"base\", \"read-tx\", \"write-tx\"],\n};\n\nexport default config;\n","import RollAuthentication from \"./authentication\";\nimport RollUserAPI from \"./user\";\nimport RollRequest from \"./request\";\nimport RollTransactionAPI from \"./transaction\";\nimport config from \"../config\";\n\nclass RollAPI {\n  constructor({ apiURL, oauthConfig, authCacheConfig }) {\n    this.authentication = new RollAuthentication(oauthConfig, authCacheConfig);\n    const request = new RollRequest(this.authentication.getAuthToken, apiURL);\n    this.user = new RollUserAPI(this.authentication.getAuthToken, request);\n    this.transaction = new RollTransactionAPI(\n      this.authentication.getAuthToken,\n      request\n    );\n  }\n}\n\nconst OAUTH_KEY = \"oauthTokens\";\n\n// Implement custom functions to cache tokens between sessions\nconst cacheOauthTokens = (oauthTokens) => {\n  localStorage.setItem(OAUTH_KEY, oauthTokens);\n};\n\nconst getCachedOauthTokens = () => {\n  return localStorage.getItem(OAUTH_KEY);\n};\n\nconst clearCachedOauthTokens = () => {\n  localStorage.removeItem(OAUTH_KEY);\n};\n\n// update the oauth configuration to log in with a different client\nconst oauthConfig = {\n  clientID: config.clientID,\n  issuerURL: config.issuerURL,\n  redirectURL: config.redirectURL,\n  scopes: config.scopes,\n};\n\n// add custom caching implementation to store tokens and refresh user sessions\nconst authCacheConfig = {\n  setCache: cacheOauthTokens,\n  getCache: getCachedOauthTokens,\n  clearCache: clearCachedOauthTokens,\n};\n\n// instantiate RollAPI class with configuration\nconst rollAPI = new RollAPI({\n  apiURL: config.apiURL,\n  oauthConfig: oauthConfig,\n  authCacheConfig,\n});\n\nexport default rollAPI;\n","import React from \"react\";\nimport rollAPI from \"../api\";\n\nexport const SessionContext = React.createContext({ isLoggedIn: false });\n\nexport default function SessionManager({ children }) {\n  const [state, setState] = React.useState({\n    isLoggedIn: false,\n    user: { media: [{}] },\n  });\n\n  // if any authentication fails, update application state as necessary\n  const handleFail = () => {\n    console.log(\"failed to authenticate\");\n    setState({ isLoggedIn: false });\n  };\n\n  React.useEffect(() => {\n    // get user data with valid authToken\n    // update application state as necessary\n    const handleSuccess = () => {\n      console.log(\"successfully authenticated\");\n      rollAPI.user\n        .getMe()\n        .then((user) => {\n          console.log(\"got user data: \", user);\n          setState({ isLoggedIn: true, user });\n        })\n        .catch((err) => console.error(err));\n    };\n\n    // check for the existance of the code parameter in the url.\n    // if the code param exists, pass the url into the initializeSession function along\n    // with custom success and failure callbacks.\n    const handleInitializeSession = () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has(\"code\")) {\n        rollAPI.authentication.initializeSession(\n          window.location.search,\n          handleSuccess,\n          handleFail\n        );\n      }\n    };\n\n    if (!state.isLoggedIn) {\n      // if the user is not logged in, attempt to refresh tokens from cache.\n      // if there are no cached tokens, the onFail callback will be invoked.\n      rollAPI.authentication.refreshFromCache(\n        handleSuccess,\n        handleInitializeSession\n      );\n    }\n  }, [state.isLoggedIn]);\n\n  return (\n    <SessionContext.Provider value={state}>\n      {React.cloneElement(children)}\n    </SessionContext.Provider>\n  );\n}\n","import React from \"react\";\nimport Button from \"./button\";\nimport rollAPI from \"../api\";\nimport { SessionContext } from \"./sessionManager\";\nimport config from \"../config\";\n\nconst isProduction = (url) => url.indexOf(\"api.tryroll.com\") !== -1;\n\nconst Header = () => {\n  const session = React.useContext(SessionContext);\n\n  return (\n    <div className='header-container'>\n      <h3>Roll OAUTH Example</h3>\n      {isProduction(config.apiURL) && <Warning />}\n      {session.isLoggedIn ? <LogoutButton /> : <LoginButton />}\n    </div>\n  );\n};\n\nconst LogoutButton = () => {\n  return (\n    <Button\n      onClick={() => {\n        const url = rollAPI.authentication.getLogoutURL();\n        console.log(url);\n        window.location.href = url;\n      }}>\n      Log Out\n    </Button>\n  );\n};\n\nconst LoginButton = () => {\n  return (\n    <Button\n      onClick={() => {\n        const url = rollAPI.authentication.getLoginURL();\n        console.log(url);\n        window.location.href = url;\n      }}>\n      Log In\n    </Button>\n  );\n};\n\nconst Warning = () => {\n  return (\n    <div className='warning-container'>\n      <p>\n        You are currently interacting with a production environment. Use at your\n        own risk.\n      </p>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport rollAPI from \"../api\";\nimport Button from \"../components/button\";\nimport { SessionContext } from \"../components/sessionManager\";\n\nexport default function HasBalance() {\n  const session = React.useContext(SessionContext);\n\n  const [inputState, setInputState] = React.useState({\n    amount: \"\",\n    symbol: \"\",\n  });\n\n  const [errMessage, setErrMessage] = React.useState(\"\");\n\n  const [successMessage, setSuccessMessage] = React.useState(\"\");\n\n  const handleSubmit = (e) => {\n    const { amount, symbol } = inputState;\n\n    setErrMessage(\"\");\n\n    let n = Number(amount);\n\n    // user must provide a valid number to check balance\n    if (isNaN(n)) {\n      setErrMessage(\"please provide a valid number\");\n      return;\n    }\n\n    // pass in the user's userID, the token symbol, and the amount.\n    // the amount does not need to be converted. The user input amount can be passed in directly (must be a number type)\n    rollAPI.user\n      .hasBalance(session.user.userID, symbol, amount)\n      .then(({ hasbalance }) => setSuccessMessage(`has balance: ${hasbalance}`))\n      .catch((err) => setErrMessage(err.message));\n  };\n\n  return (\n    <div className='has-balance-container'>\n      <div>\n        <h3>Check user balance</h3>\n        <p>Returns true or false</p>\n        <input\n          placeholder='amount'\n          value={inputState.amount}\n          onChange={(e) =>\n            setInputState({ ...inputState, amount: e.target.value })\n          }\n        />\n        <input\n          placeholder='symbol'\n          value={inputState.symbol}\n          onChange={(e) =>\n            setInputState({\n              ...inputState,\n              symbol: e.target.value.toUpperCase(),\n            })\n          }\n        />\n        <Button onClick={handleSubmit}>Submit</Button>\n      </div>\n      <p>{errMessage}</p>\n      <p>{successMessage}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SessionContext } from \"./sessionManager\";\n\nexport default function UserInfo() {\n  const session = React.useContext(SessionContext);\n\n  const pic =\n    session.user.media && session.user.media[0]\n      ? session.user.media[0].link\n      : \"\";\n\n  return (\n    <div className='user-info-container'>\n      <img src={pic} alt='roll-user-profile-pic' className='profile-pic' />\n      <div>\n        <p>username: {`${session.user.username}`}</p>\n        <p>name: {`${session.user.name}`}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport rollAPI from \"../api\";\nimport { SessionContext } from \"../components/sessionManager\";\n\nfunction ThirdParty({ serviceName, info }) {\n  return (\n    <div>\n      <h4>{serviceName}</h4>\n      <p>{`name: ${info.name}`}</p>\n      <p>{`username: ${info.username}`}</p>\n    </div>\n  );\n}\n\nfunction ThirdPartyProfiles() {\n  const session = React.useContext(SessionContext);\n  const [profiles, setProfiles] = React.useState({ third_parties: {} });\n\n  // pass in the user's userID to get information on which third party applications have been connected to their roll account\n  React.useEffect(() => {\n    rollAPI.user\n      .getThirdPartyProfiles(session.user.userID)\n      .then((profiles) => setProfiles(profiles))\n      .catch((err) => console.error(err));\n  }, [session.user.userID]);\n\n  return (\n    <div className='third-party-container'>\n      <h3>Third Party Profiles</h3>\n      {Object.keys(profiles.third_parties).map((key, i) => {\n        return (\n          <ThirdParty\n            key={`profile-${i}`}\n            serviceName={key}\n            info={profiles.third_parties[key]}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ThirdPartyProfiles;\n","import React from \"react\";\nimport { SessionContext } from \"../components/sessionManager\";\nimport Button from \"../components/button\";\nimport rollAPI from \"../api\";\n\n// IMPORTANT - currently all roll production tokens have 4 decimals. Do not assume this in production. Use the decimal value of a particular token to perform any conversions.\nconst TOKEN_DECIMALS = 4;\n\nexport default function Transfer() {\n  const session = React.useContext(SessionContext);\n\n  const [inputs, setInputs] = React.useState({\n    symbol: \"\",\n    amount: \"\",\n    username: \"\",\n  });\n\n  const [response, setResponse] = React.useState({ success: \"\", error: \"\" });\n\n  const updateInputs = (value, id) => {\n    setInputs({\n      ...inputs,\n      [id]: value,\n    });\n  };\n\n  const handleSend = async () => {\n    let n = Number(inputs.amount);\n\n    // user must provide a valid number\n    if (isNaN(n)) {\n      setResponse({ ...response, error: \"please provide a valid amount\" });\n      return;\n    }\n\n    // perform basic validation\n    if (n === 0) {\n      setResponse({ ...response, error: \"amount must be greater than 0\" });\n      return;\n    }\n\n    if (!inputs.symbol) {\n      setResponse({ ...response, error: \"please provide a symbol\" });\n      return;\n    }\n\n    if (!inputs.username) {\n      setResponse({ ...response, error: \"please provide a username\" });\n      return;\n    }\n\n    // multiply the user input number by 10^TOKEN_DECIMALS. round the result to account for potential JS floating point error\n    n = Math.round(n * 10 ** TOKEN_DECIMALS);\n\n    try {\n      // pass in the user's userID, the token symbol, the converted amount to be sent, the token decimals, and the recipient username\n      // this will perform an internal transaction on roll\n      const resp = await rollAPI.transaction.internal(\n        session.user.userID,\n        inputs.symbol,\n        n,\n        TOKEN_DECIMALS,\n        inputs.username,\n        \"this was a third party transfer\"\n      );\n\n      console.log(\"transfer response: \", resp);\n\n      setResponse({\n        success: `Successfully transfered ${resp.floatAmount} ${resp.token.symbol}`,\n        error: \"\",\n      });\n    } catch (err) {\n      setResponse({ success: \"\", error: err.message });\n    }\n  };\n\n  return (\n    <div className='transfer-container'>\n      <h3>Transfers</h3>\n      <input\n        placeholder='amount'\n        value={inputs.amount}\n        onChange={(e) => updateInputs(e.target.value, \"amount\")}\n      />\n      <input\n        placeholder='symbol'\n        value={inputs.symbol}\n        onChange={(e) => updateInputs(e.target.value.toUpperCase(), \"symbol\")}\n      />\n      <input\n        placeholder='recipient username'\n        value={inputs.username}\n        onChange={(e) => updateInputs(e.target.value, \"username\")}\n      />\n      <Button onClick={handleSend}>Send</Button>\n      <p>{response.error || response.success}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/header\";\nimport SessionManager, { SessionContext } from \"./components/sessionManager\";\nimport HasBalance from \"./features/hasBalance\";\nimport UserInfo from \"./components/userInfo\";\nimport ThirdPartyProfiles from \"./features/thirdPartyProfiles\";\nimport Transfer from \"./features/transfer\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <SessionManager>\n      <Content />\n    </SessionManager>\n  );\n}\n\nconst Content = () => {\n  const session = React.useContext(SessionContext);\n\n  return (\n    <div className='App'>\n      <Header />\n      {session.isLoggedIn ? (\n        <>\n          <UserInfo />\n          <HasBalance />\n          <ThirdPartyProfiles />\n          <Transfer />\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}